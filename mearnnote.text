-------------------MERN STACK---------------------

------------HTML-------------

1.Markup Language- set of rules that will define what type of content a document should hold
2.HTML- used to display contents in a webpage
3.HTML Document- collecton of HTML elements
        HTML Element- <starting tag>
                            content
                      <closing tag>
        Tag- <.....> ....... </......>
4.HTML Structure-   <html>
                        <head>
                        <title>.....</title>
                        </head>
                        <body>
                        ...........
                        </body>
                    </html>  
5.Latest version of HTML- HTML 5  
6.Basic tag- used to display content in webpage                   
        -Headlines- <h1>........<h6>
        -Paragraph- <p> tag
        -Bold- <b> tag
        -Italics- <em> tag
        -Highlight- <mark> tag
        -Strike- <s> tag
        -Superlative- <sup> tag
        -Subscript- <sub> tag
        -Links- <s> tag
        -Break a line- <br> tag
        -Ordered list- <ol> tag, <li> tag
        -Unordered list- <ul> tag, <li> tag
        -Description list- <dl> tag, <dt> tag, <dd> tag
        -Image tag- <img> tag
                   container tag:
                        -div tag
                        -article tag
                        -section tag
        -Video tag- <video> tag  
        -Embedding- <iframe> tag
        -Semantic tags: describes its meaning to both browser and developer
                  -header tag
                  -nav tag
                  -section tag
                  -article tag
                  -aside tag
                  -footer tag              
                       


7.Based on display value of tags in browser,we can classify tags

        Block elements: uses entire width of the browser to display content in browser
                        ex: h1-h6,<p> tag
        Inline elements: uses only width of the content to display content in browser 
                         ex: <a> tag,<img> tag


                         FORMS
            --------------------------------
            Forms tags- input tags: text,number,date
                        check box
                        dropdown
                        radio button
                        button
        


                         TABLE
            --------------------------------

    Table- used to display contents in rows and columns
        table tags- <thead>  table head
                    <tbody>  table body
                    <tr>     rows
                    <th>/<td> columns

                    colspan- group columns
                    rowspan- group rows




-----------------------------------------------------------------------
                        CSS- Cascading Style Sheet
-----------------------------------------------------------------------
1.used to style HTML elements
2.ways to apply CSS in HTML:
               -Inline CSS- stlye attribute
                     syntax: style="property:value;"
               -Internal CSS- <style>
                     syntax: 
                           <style>
                              selector{
                                property: value;
                              }
                           </style>
               -External CSS- use an external css file and we have to link it with HTML file
                     syntax:
                           selector{
                                property: value;
                           } 
3.CSS Selectors- used to select HTML elements to css file
           -Tag name
           -id- #
           -class- . 
           -universal selector- *                                                               -------id>class>tag------[priority]
           -css combinators-
                   -Grouping selectors- using comma
                   -decendent selector- using space
                   -child selector- using >
                   -sibling selector- using ~
                   -immediate sibling selector- using +
4.Box model- 
       -margin
       -padding
       -border
5.CSS properties-
       -float- float elements position in left or right
       -position- controls position of elements in HTML
             -static
             -fixed
             -relative
             -absolute
             -sticky
       -z index 
       -FlexBox: used to arrange HTML elements in either row/columns
       -Flex container: parent tag which holds elements that to be arranged as row/column.Apply flex in parent tag     

   -Pseudoclass- used to define a special state of an element.
      syntax:   selector:pseudo class{
                      property:value;
      }
      -Transform
      -Transition

      -Grid: used to display elements in rows and columns. where user can fix width of row/column
           -Grid container- display as Grid
           -Grid-templete- column/row: used to set widthof of column/row
           -Gap: used to set space between row or column
           -repeat()
      -Linear-Gradient: used to set combination of colours background
            syntax- background-image: linear-gradient(direction,color-stop1,color-stop2,....);
      -CSS animation: animation property,defines by- @keyframes
          -animation libraries:
                        -animate.style: 
                        -AOS : animation while scroll 
                        -locomotive scroll: companies using (professional)  

      -Website hosting: 
           -netlify
           -Github
           -Vercel
      -Media queries: used to design responsive Website
                 - width & height of viewport
                 -orientation of viewport (landscape or portrait)
                 -resolution
            -use @media keyword:
            -screen breakpoints:  
                 -480px - sm,760px - md,992px - lg,1200px - xl
            -@media not|only media type and (media feature) and (media feature) {
                  CSS-Code;
                  }



------------------------------------------------------------------------------------------
                          BOOTSTRAP: CSS FRAMEWORK
------------------------------------------------------------------------------------------

1.Used to build fast and responsive pages 
2.Predefined class of styles,common bootstrap classes:
          -container/container-fluid  
          -border
          -color: success-green
                  danger-red
                  warning-orange
                  primary-blue
                  info-sky blue
                  dark-black
                  light-white
                  secondary-grey  
          
          -margin: m/mt/mb/ms/me -1/2/3/4/5
          -text-center
          -padding: p/pt/pb/ps/pe -1/2/3/4/5
          -background color: bg-color
          -text color: text-color
          -to fit img: img-fluid
          -width: w-25/50/75/100
          -to give rounded boreder for img: img-thumbnail
          -to give rounded edge for div: rounded
          -align text: text-start/text-end
          -bold text: fw-bold/fw-semibold/fw-bolder etc
          -text size: fs-1/2/3/4/5
          -button: btn-outline-color
          -flex: d-flex
          -input: form-control
          -grid: 
              -row: can be divided into max of 12 columns
              -column




------------------------------------------------------------------------------------------
                          Tailwind : CSS FRAMEWORK
------------------------------------------------------------------------------------------

1.Rapidly build modern websites without ever leaving your HTML.





















-------------------------------------------------------------------------------------------
                             GIT & GITHUB
-------------------------------------------------------------------------------------------

1.GIT: used to control version of a code
2.GIT commands: 
              -git status- use to check the status of git in a folder
              -git init- use to create a git repository in a folder
              -git add .- used to track all untracked files to git
              -git commit -m "message"- used to store/save tracked files to git
              -get remote add origin url-of-github-repository: to initially link github repo with git repo
              -git push origin master: used to push git code to github origin master





-------------------------------------------------------------------------------------------
                             Javascript
-------------------------------------------------------------------------------------------

1.nodeJs: a collection of JS libraries and runtime environment for JS
2.Basic concepts:
                -Display contents in JS: console.log()
                -Data types: 
                     -Text: contents should be inside , double/single quotes
                     -Number
                     -Boolean
                     -Undefined
                     -object
                -combine different data types in JS
                     -using comma
                     -concatenation using +
                     -Template literals: combines diffrent types of data within a back tick symbol(`), it uses ${variableName} to display variables.
                -Variables: used to store datatypes
                -Identifiers: set of rules which defines what name should be assign to variables
                -Creation of variables:
                          -using var keyword: syntax-
                                                     var variableName/ var variable_name
                          -using const keyword: syntax-
                                                     const variable = value
                          -using let keyword: syntax- 
                                                     const variable = value                           
                -Hoisting: moving a variable declaration to the top of code  
                -Difference between different variables in JS


         var                                         const                                          let
---------------------------------------------------------------------------------------------------------------------------------------------------
1. use var keyword                           use const keyword                               use let keyword
2. can reassign its value                    can't reassign value                             can reassign value
3. global scope                              block scope                                      block scope
4. hoisted with initial value                hoisted without initial value                    hoisted without initial value



   - Operators in JS
          -Assignment operators: =
          -Arithmetic operators: + - * / % **
          -Relational operators: < > >= <= == === != (returns boolean answers)
          -Logical operators: && || !  (combines 2 relational operators,returns boolean)

          &&                                      ||                                            !
 ---------------------------------------------------------------------------------------------------------------------------------------------
      T && T = T                              T || T = T                                      T ! F
      T && F = F                              T || F = T                                      F ! T
      F && T = F                              F || T = T
      F && F = F                              F || F = F
-------------------------------------------------------------------------------------------------------------------------------------------------- 

         -Increment or Decrement operators: ++ -- 
         -Short hand operator: += -= *= 
         -Ternary operator:
                     condition ? when condition true : when condition false
         -Truthy operator: condition && when condition true
         -spread operator - used t spread an itrating variable to a single array,
            symblo for spread is ...
         -REST operator : used to combine rest of the data to a single array
             use ... operator 
   - Decision making/ conditional statements
         - if statement:
                  if(condition){
                    when condition true
                  } 
         - if else statement:
                  if(condition){
                     when condition true
                  } 
                  else{
                       condition false
                  }      

         - else if ladder  
         - Switch statement: syntax-
                                   switch(condition){
                                        case answer 1 : statement
                                        break;
                                        case answer 2: statement
                                        break;
                                        default : statement
                                   }
    -Looping statements: used to repeat same task multiple times    


            - while Loop: syntax-
                             *initialize a variable
                             *while(condition using variable){
                                 execute condition true
                              *  change the variable
                             }

                   
            - for loop : syntax-
                           for(initialize a variable; condition using variable;change the value of variable used in condition){
                                execution condition become true
                           } 

         -break statements: used to break from a loop execution   
         -continue statements: used to skip loop for  certain values  
      -Nested loops: a loop inside another loop

                    syntax- outer loop{
                         inner loop{
                              //completes execution first
                         }
                    }       
     -Functions: used to perform a specific task,normal functions are hoisted
           -Function definiition part: define task to be performed by the Function
                                       -syntax: function function_name(args1,args2......){
                                        function body  where we can define task to be performed using arguments passed to the function
                                       } 
          -Function call: used to execute function in JS
                          -syntax: function_name(para  1,para2....) 
          -Return statement: used to return execution from definition to function call along with value from its definitions,return must define at  the end of the function definition.
          -Types of function:

                  -Predefined functions: eg- console.log(content),Number(value) 
                  -Arrow functions: used as an alternative for normal function
                                   syntax: var/const/let function-name = (arg1,arg2,....) =>{
                                   function body to perform task 
                                   }   
                  -Callback function: A function definition inside another function call
                                      syntax: functionName( ()=>{function Body} ) 
                  -Anonymous function/Nameless function: they are self executing
                  -Recursive function/Repeating function: used to perform a task repeatedly , calling a function inside its own definition.
                                                         syntax- function fun_name(){........fun_name()}
                  -Nested function: defining a function inside another function definition.   
                  -Closure property: in nested functions, child functions can access its parent data.

      
     -Array: used to store multiple values in a single variable 

        ARRAY METHODS- 
        -push(value):  to insert a value to the end of an array 
        -unshift(value):  to insert a value to the start of an array   
        -pop(): remove value at the end of array            
        -shift(): remove value at beginning of an array  
        -sort(callback function): used to sort existing array in ascending or descending order 
        -forEach(callback function): an alternative for for-of loop (an array method)  
        -filter(callback function): create a new array with values satisfying condition applied in existing array 
        -find(callback function): return value which satisfies condition applied to existing array.    
        -map(callback function): returns a new array with values after applying a mapping function to the existing array. 
        -reduce(callback function): return either highest/lowest/sum of an existing array after applying a reduce function. 
        -reduceRight(callback function): return either first highest/lowest/sum of an existing array after applying a reduce function. 
        -Some(Callback function): returns a boolean which satisfies condition applied in an existing array
        -every(Callback function): returns a boolean which satisfies condition applied in an existing array,it returns true if all items satisfying the condition.
        -flat(depth): return a new array with reduced dimension of an existing array to its depth value.
                     -if depth is 'infinity' this flat will always return array with dimension 1
        -includes(array-item): return boolean if the element is included within the array
        -indexOf(): to find the index of an array element  
        -splice(index,delete count,replacement value if needed): return an array without deleted item/also can replace items in array.        
        -reverse(): return new array to join item with existing array
        -concat(item): return new array including both array elements 
        -join(seperator): used to return a string of array items seperated with given seperator.    
     
     
     -String methods:
            -Length: gives total number of characters in string
            -toUpperCase: convert string to capital letters
            -toLowerCase: convert string to small letters
            -substring(starting index,ending index): returns sub string of given index
            -slice(starting index,ending index): returns sub string of given index / and also remove characters from end of the string 
            -startWith(character to check ): returns boolean, the string starts with given character or not
            -endsWith(character to check ): returns boolean, the string ends with given character or not
            -split(): used to split words to characters 
            -includes(substring):returns boolean value whether it contains substring or not 
            -trim()- used to remove unwanted spaces from starting and ending of a string
            
     -Objects: Used to store data in key -value pairs, {key1:value,key2:value,........etc}
          -To access values stored in an object
             -Bracket notation: objectname[""]
             -Dot notation: objectName.key 
          - To check a key is present in an object 
             -Use "in" operator, it returns boolean value, syantax: "key" in objectName
             -hasOwnProperty() object method, it returns boolean value, synatx: objectName.hasOwnProperty("key")
          - To insert value in an object
             -objectName["key"] = value / objectName.key = value
             -Object.assign(destination, source)
          -To insert update in an object : use assign operators
          -Object.key(objectName): Return an array of all keys 
          -Object.values(objectName): return a array of all values in the object
          -Object.entries(objectName) : used to convert an object to an array
          -delete keyword : it removes a key from an object 
          -Destructuring of an object : used to access the values in an object without using any notations.
             - const {ke1, key2, key3,.....etc} = objectName
     -Exception/Runtime error handling : use try-catch block 
     -OOPs : Object Oriented Programming Language
         - Basic Concept :-
             - class : it is blueprint of object, can have some properties, functions, 
                       use keyword class, function used inside a class is known as method., Predifined 
                       function - 'constructor' initialieing class properties.
             - Object : it is a real world entity, used to access class properties or functions outside.
                        create an object : new class-name()
             - Reference : "this" keyword used to link properties / functions with its own class
          - features of OOPs : 
             -inheritance:
                 -Classical inheritance : using the keywords extends
                 - Prototype inheritance : using keyword  __proto__  
             -polymorphism: 
             -Abstraction:
             -Encapsulation:


  -------------------------------------------------------------------------------------------------------------------------------------------------- 
                                 JavaScript : FRONT END
  -------------------------------------------------------------------------------------------------------------------------------------------------- 

1. Used to provide behaviour to HTML elements
2. Appling JS to HTML elements
   - Internal JS - using JS code in script tag 
   - External JS - Link an external JS file using script tag 
3. DOM : Document Object Model : Tree structure using objet corresponding to a webpage 
4. DOM Methods : used to select HTML elements into JS  
     - using tags  : document.getElementByTagName("tag")
     - using id    : document.getElementById("id") / id
     - using class : document.getElementByClassName("class")
     - using querySelector : document.querySelector("tag/#id/.class")
     - using querySelectorAll : document.querySelectorAll("tag/#id/.class")
5. Events : Triggred by user action, events occured in HTML elements 
     - Mouse Triggred events : click, hover, drop and drag
     - Keyboard related events : key press down, up, hold, ....
     - Touch related events : Touch
6. Handle an event in HTML : event-function-call(), behaviour change must define as a function in JS   
7. Access / update content of an HTML element in JS :
          -innerHTML/innertext property
8. permanently store data in a browser
      - data will be stored permanently and data store as key value paires. type of both key and value must be string, to convert value to string  use JSON.stringify(value)
       string data to normal type : JSON.parse(value)

      - Local storage :
        - setItem (ley,value) : used to store data
        - getItem(key) : used to get value from storage 
        - removeItem(key) : used to deletea value from storage
        - clear() : used to clear storage
      - Session storage 
9. Working Browser JS runtime environment : 
    - Javascript engines : It handles js execution, convert js code code understand by browser engine 
    - Call stack : used to keep track of curently executing functions, make sure each one finishes before moving to next.Only one call stack in JS engine thats why its known as Single Threaded Programming.
     - JS will handle two types of function
        - syncronous function :Functions executes with out any delay
        - asyncronous function :  Functions executes with some delay
            - Callback function : Task Queue (macro task queue)  - like setTimeout / user events (xlick/,drag,.....)
            - web APIs : storedin Micro task queue which is a priority Queue
     - Event loop : It manages the flow of the code , ensuring asyncronous operation and user interaction run smoothly 
    - Heap : used as a storage for variable and objectin js
10. Asyncronous function handling in JS
    - Call back function : Nesting of caiiback function will leads to callback hell, that means js wont give any response for this kind of call...
    - Promise : Used to resolve asyncronous function it will definitely gives you a responce,
       A ways to resolve promice :
             - resolve state : if asyncronous function call return a responce that state of promice is known as "resolved state".
               to get responce from resolved state we have to use then method
             - reject state : If asyncronous function call returns nothing after making the call that state. catch method 
              - Async - Await keywords : to make  promice much more easier, to avoid callback from promise, is a function is asyncronous then only we can use await inside the function. 
        - Async : Makes a function return a promise 
        - Await : Makes a function to wait a promise
11. API (Application Programming Interface) : Used to communicate between applications using internet          
          -Types of API's : Based on communication 
               - REST/ SOAP : Client - server application 
               - SOCKET : WEB chatting applications 
               - GRAPHQL : 
12. URL : Uniform Resource Locator 
    ex : https://jsonplaceholder.typicode.com/users/1
      - Base URL : https://jsonplaceholder.typicode.com
      - URI : Uniform resource identifier ex users
      - Pth Prameter : numbers associated with in URI 
    ex : https://www.google.com/search?q=mercury&sca
      - Query parameter : Are value after? in URI 
13. HTTP (Hyper Text Transfer Protocol) : used to allow application to make request via internet 
      2 parts : 
         - HTTP Request : Clint application will make request to server 
           -2 parts :
              - Header part : To keep secret data 
              - Body part : used to hold the data(Binary/xml/JSON....) to be transfered from clink to server 
         - HTTP Response Status : To get responce status      
         - HTTP Response : Server application provides the responce 
           - status codes : 
              - 1xx : Informational error 
              - 2xx : success
              - 3xx : redirection
              - 4xx : Clint error 
              - 5xx : server error 
14 . JSON (Java Script Object Notation) : It is a data formate used to transfer data from applicayions to another applications using internet 
  - data stored a key valu paires, here "key" must be always string type
  ex : "username" : "Max". "age": 39





   - API call using XMLHttpRequest(XMR)
   - API call using fetch API : 
      - fetch() function return promise, then resolved responce will get from "then" method and reject responce get from "catch" method 
16. Javascript modules : used to share data from one file to another can used in 2 types : 
   - Export statements : 
       - export default keyword : this keyword must be at the end of the file 
       - export keyword : used to export multiple data from a single js file 
   - import statements : used to use the export data from another js file
       - import with curly braces : if data exported using 'export keyword'
       - importwithout curly braces : if data exported using 'export default keyword'


  -------------------------------------------------------------------------------------------------------------------------------------------------- 
                                            REACT : Advanced Frontend Application Library
  -------------------------------------------------------------------------------------------------------------------------------------------------- 
   1. Basic REACT : 
       - REACT Application is a collection of diffrent libraries 
       - React Application is consists of diffrent "Components", which used to display contents on browser.All the components are arranged in a tree structure. Tree structure has a single parent/rootnode which is by default known as "APP Component",Components are reusable
       - Pure JavaScript functions to build components, it will return how to display contentsin browser. These functions are capable of doing single task with the help of its arguments. Functions with no side effects.
       - Declarative Approch  
       - virtual DOM : Light-weight memmory representation of real DOM 
       - Babel Library : used to diplsy contents into browser 
       - JSX (JavaScript XML): JS extension for writing HTML code in JavaScript, used to display content browser 
         - JSX elements :  ex: const heading = <h1> Heading <?h2>
         - Rules for using JSX 
             -Every JSX element must be inside a single tag. Parent tag can be any container tags (div,section,article,etc.....) or REACT fragments(<>,</>) tag without name
             - in JSX we have to use "camel case" to write JSX contents :  ex : fontSize
             - Every JSX code must have a closing tag. If a tag has content then : 
               <startingtag> content </ending tag> 
               if a tag has no content :
               <startingtag></ending tag> 
               or we can use self closing tags (<startingta/>)
               - instead of attribute "class" use "className" in jsx 
               - Insted of attribute "for" use "htmlfor" in JSX
               - in JSX we have to use "camelCase" to write elements / content eg: fontWeight , onClick
               - in JSX, we can directly pass JS code inside a curly braces, (ex : {js code})
2. REACT Application Creation :
      - 2 ways to create react application
          - CRA (using create-react-app command)
          - vite : tool for building web applications
            - Installing vite globally : npm i -g create-vite
            - react app Creation using vite :
                  npm create vite@latest 
                  reactApplicationname
                  -- -- template react 
3.Files and folder structure of react app using vite
         - package.json file : npm configuration file for the project
         - package-lock.json file : used to hold version of dependent package of the project.
         - eslint.config.js : JS configuration files 
         - node_modules folder : used to locally store dependent packages of project, we can generate node_modules folder with the help of command npm install / npm i   
         - public folder : used to hold data that can be accessed by any part of the porject. 
         - index.html file : Entry point of react application, react app will display in index.html
         - src folder : logic of react app is defined here 
         (render - display content in jsx)  
         - main.jsx : define the logic to render react app in html element with id as "root"
                - createRoot() createRoot lets you create a root to display react components inside a browserDom node. 
         - css file : used for styling 
         - app.jsx : used to create react root components
         - asset folder : used to hold media files in react project 
4. Components : It is a part of user interface. Used to display content in browser , to create Component, create js/jsx file with fileName starts with capital letter.
       - creaating  components in 2 ways: 
            - Function based components/  Stateless Components : uses js pure functiions to build components , functiion name must be similar to its file name. function ruturn jsx code 
            - ClassComponents /  Statefull Components : Uses class to create components.
            class inherits react component class.render method in class used toreturn jsx.
               - to create state. it has to call super method in its constructor to get its parent features. state is an object, where we can store values as key-value pairs, to update the state use a predefined method setState() pass its argument as updated value of state.
        - Life cycle of react components :
           - Mounting phase : Putting JSX into DOM
              - constructor()
              - getDerivedStateFromProps()
              - render() 
              - componentDidMount()
           - Updating phase : when a component get updated.
              - getDerivedStateFromProps()
              - getSnapshotBeforeUpdate()
              - shouldComponentUpdate()
              - render()
              - componentDidUpdete()
           - Unmounting phase : Removing component from DOM 
              - componentWillUnmount()

               Class Components                             function base components 
------------------------------------------------------------------------------------------------------------------------
          1. Using Class to create,                                   1. using pure js Functions 
             render method must return jsx                               and return jsx
          2. statefull components                                     2. stateless Components
          3. Hooks are not used                                       3. Hooks are used
          4. need constructor to initialize state                     4. No need of constructor
          5. Life cycle methods ars available                         5. Lifen cycle methods are not available 
            ex: render 


5. Data sharing between React component 
           - Data can be shared from parent to child : using "props"
6. Props : Is a property of a component.It is an object used to transfer data from parent component to child component, parent data can be shared via child tag attribute. To access parent data in child we have Props. props used in the child component function argument.
7. conditional rendering : used based on condition rendering jsx elements in browser , using if-else statement {Ternaryoperator ? :} if statements (&& operator) 
8. List in React : use map array method. Set a key attribute to duplicating jsx element in a list
9. CSS styling in React : Diffrent ways to apply css in jsx elements
    - Inline css : using style attribute to apply style to jsx element, Style must be as js object 
        - synatx : style = {{cssProperty}}
    - External CSS : Define css style in an external css file. Link the css file to component file using import statements . we cannot import css file to a variable in component 
    - Using CSS Module files : file extensiom should be .module.css this type of files is 'module file'. In this we have to define style in class. To use module css file we have to import it to to the component file.
         - import variableName from 'Modulefile path', to apply style in component, use variable.classname 
10. Event Handling in React : syntax : event={functionCall}
        - Binding function without argument : event={functionName}
        - Binding functions with arguments : event = {()=>functionName(arguments)}
        - Binding Funtions with argument as events : event ={(event)=>functionName(event)}
11. State in React : used to store data of a Component. when state value changes, the component will rerender
12. Hooks in React : Predefind methods in React is known as Hooks. used to provide react component features to functional Components. To use a hook in a functional component, it has to call the hook 
       - Rules to call hooks in functional component
              - import hook in functional component
              - to use hook in component call the hook in top level of component.
              - Hooks cannot be conditional 
       - Based on react features there are diffrent types of hooks available 
          - Build in hooks:
              - useState(initial value) hook : used to create state infunctional component, this hook will return an array of 2 argument. first argument : state , second argument : function used to update state 
              - useEffect(callback function,dependnct) : used to apply side effects of the functional components. We can pass side effects in its first argument add a call back function. Wecan also pass an optional dependency argument to decide when to apply side effects in component. 
                  dependency different values:
                     - no value : side effects will apply to the component all the time, which leads to an infinite loop.
                     - empty array : side effects will apply to the component only at the time of loading the  component in DOM 
                     - [state,props,variable_name] : side effects will apply to the component only at the time of loading the component in DOM but also whenever the value of state/props/variable_name given in the dependency changes 
              - useRef(initial value) : it is a react hook that lets you Reference a value thats not needed for rendering . initialValue is optional in useRef hook. it return an object with 'current' key.
          - Custom hook : create js file to definr a specific function for a special task. export the functiion from that file . function name must start with 'use' keyword 
13. Form handling in REACT : There are 2 ways to manage data inside the form by a component 
         - Controlled components : There are components which store form data inside its own state 
         - Uncontrolled components : component who access form data using its DOM elements reference 

